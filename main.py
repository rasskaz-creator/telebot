import telebot
import random
from telebot import types # –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ—á–µ–∫
from telebot.handler_backends import State, StatesGroup # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
from database import User, add_user, Session, delete_word, add_new_word, get_all_words_for_user, Global_Words, create_db, add_initial_global_words
from config import TOKEN

bot = telebot.TeleBot(TOKEN)

user_word_data = {}

class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'
    YES = '–î–∞'
    NO = '–ù–µ—Ç'
    CANCEL = '–û—Ç–º–µ–Ω–∞'
    CONFIRM = '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'
    CONTINUE = '–ü–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤'
    LIST_WORDS = '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ª–æ–≤'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    another_words = State()
    

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_name = message.from_user.username  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    telegram_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –Ω–µ—Ç
    with Session() as session:
        existing_user = session.query(User).filter_by(telegram_id=telegram_id).first() # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

    if not existing_user:
        add_user(user_name, telegram_id)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


    markup = types.ReplyKeyboardMarkup(row_width=2)  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ—á–µ–∫ (—Ä–∞–∑–º–µ—Ä 2)

    yes_btn = types.KeyboardButton(Command.YES)
    no_btn = types.KeyboardButton(Command.NO)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)

    markup.add(yes_btn, no_btn, add_word_btn)

    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.\n–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n'
                                      f'–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, –∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.\n'
                                      f'–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏: \n–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï \n—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô. \n–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨áÔ∏è', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == Command.YES or message.text == Command.NO)
def yes_or_no(message):
    # message.from_user.id –∏ message.chat.id ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞.
    if message.text == Command.NO:
        bot.send_message(message.chat.id, '–•–æ—Ä–æ—à–æ, –º—ã –º–æ–∂–µ–º –ø–æ–∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø–æ–∑–∂–µ!')
    else:
        start_bot(message)

@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_the_word(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if 'target_word' in data:
            word_to_delete = data['target_word'] # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
            markup = types.ReplyKeyboardMarkup(row_width=2)
            confirm_btn = types.KeyboardButton(Command.CONFIRM)
            cancel_btn = types.KeyboardButton(Command.CANCEL)
            markup.add(confirm_btn, cancel_btn)
            data['deleting_word'] = word_to_delete # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ data
            bot.send_message(message.chat.id, f'–¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ "{word_to_delete}"?', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
        
        
@bot.message_handler(func=lambda message: message.text == Command.CONFIRM or message.text == Command.CANCEL)
def handle_confirmation(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if message.text == Command.CONFIRM:
            if 'deleting_word' in data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
                word_to_delete = data['deleting_word']
                print(isinstance(word_to_delete, Global_Words))
                if isinstance(word_to_delete, Global_Words): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                    word_value = word_to_delete.global_word  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    yes_btn = types.KeyboardButton(Command.YES)
                    no_btn = types.KeyboardButton(Command.NO)
                    markup.add(yes_btn, no_btn)
                    return bot.send_message(message.chat.id, f'–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ "{word_value}" –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–∞–∑–æ–≤–æ–µ —Å–ª–æ–≤–æ –±–æ—Ç–∞. –£–¥–∞–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —Å–ª–æ–≤–∞. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—É—á–µ–Ω–∏—é —Å–ª–æ–≤?', reply_markup=markup)
                else:
                    delete_word(word_to_delete, message.from_user.id)  # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –ë–î
                    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ "{word_to_delete}" —É–¥–∞–ª–µ–Ω–æ.')
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –£–º–µ–Ω—å—à–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–∞–∑–º–µ—Ä—É
                    next_btn = types.KeyboardButton(Command.NEXT)
                    markup.add(next_btn)
                    bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=markup)
                    del data['deleting_word']  # –£–¥–∞–ª—è–µ–º –∫–ª—é—á –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            else:
                bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –ù–µ—Ç —Å–ª–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.')
            
        elif message.text == Command.CANCEL:
            bot.send_message(message.chat.id, '–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.')
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)  # –£–º–µ–Ω—å—à–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —Ä–∞–∑–º–µ—Ä—É
            next_btn = types.KeyboardButton(Command.NEXT)
            markup.add(next_btn)
            bot.send_message(message.chat.id, '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:', reply_markup=markup)


@bot.message_handler(func=lambda message: message.text == Command.LIST_WORDS)
def show_words(message):
    user_id = message.from_user.id
    all_words_for_user = get_all_words_for_user(user_id)
    words_list = '\n'.join([
        f'{i + 1}. {word.global_word if isinstance(word, Global_Words) else word.word} - {word.translation}'
        for i, word in enumerate(all_words_for_user)
    ])
    bot.send_message(message.chat.id, f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–≤–æ–∏—Ö —Å–ª–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:\n{words_list}')



@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def skip_word(message):
    start_bot(message)

@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:', reply_markup=types.ReplyKeyboardRemove())
    user_word_data[message.from_user.id] = {'word': None, 'translation': None} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@bot.message_handler(func=lambda message: message.from_user.id in user_word_data and user_word_data[message.from_user.id]['word'] is None)
def translation_word(message):
    user_word_data[message.from_user.id]['word'] = message.text.strip()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–æ, —É–±–∏—Ä–∞—è –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞:')
    
@bot.message_handler(func=lambda message: message.from_user.id in user_word_data and user_word_data[message.from_user.id]['word'] is not None and user_word_data[message.from_user.id]['translation'] is None)
def receive_translation(message):
    translation = message.text.strip()

    user_word_data[message.from_user.id]['translation'] = translation # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    word = user_word_data[message.from_user.id]['word']
    user_id = message.from_user.id

    add_new_word(word, translation, user_id) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    bot.send_message(message.chat.id, f'–°–ª–æ–≤–æ "{word}" —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º "{translation}" –¥–æ–±–∞–≤–ª–µ–Ω–æ!')

    del user_word_data[message.from_user.id]  # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    words_count = len(get_all_words_for_user(user_id)) # –í—ã–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤
    bot.send_message(message.chat.id, f'–¢—ã –∏–∑—É—á–∞–µ—à—å —É–∂–µ "{words_count}" —Å–ª–æ–≤(–∞)!')

    markup = types.ReplyKeyboardMarkup(row_width=2)  # —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ—á–µ–∫
    continue_btn = types.KeyboardButton(Command.CONTINUE)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    markup.add(continue_btn, add_word_btn)
    bot.send_message(message.chat.id, '–¢—ã —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∏–∑—É—á–µ–Ω–∏—é —Å–ª–æ–≤?', reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == Command.CONTINUE)
def command_continue(message):
        start_bot(message)
    

@bot.message_handler(commands=['cards'])
def start_bot(message):
    user_id = message.from_user.id
    words = get_all_words_for_user(user_id)

    if not words:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞.")
        return

    chosen_word = random.choice(words)
    
    if isinstance(chosen_word, Global_Words): # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        target_word = chosen_word.global_word  # –ò—Å–ø–æ–ª—å–∑—É–µ–º global_word
        russian_word = chosen_word.translation
    else:
        target_word = chosen_word.word  # –ò—Å–ø–æ–ª—å–∑—É–µ–º word –∏–∑ —Ç–∞–±–ª–∏—Ü—ã Words
        russian_word = chosen_word.translation  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        
    other_words = [w.global_word if isinstance(w, Global_Words) else w.word for w in words if w != chosen_word]
    other_words = random.sample(other_words, min(len(other_words), 3))
    

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    markup = types.ReplyKeyboardMarkup(row_width=2)
    buttons = [types.KeyboardButton(word) for word in [target_word] + other_words]
    random.shuffle(buttons)
    markup.add(*buttons)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    list_btn = types.KeyboardButton(Command.LIST_WORDS)
    markup.add(next_btn, add_word_btn, delete_word_btn, list_btn)

    bot.send_message(message.chat.id, f'–ö–∞–∫–æ–π –ø–µ—Ä–µ–≤–æ–¥ —É —Å–ª–æ–≤–∞ {russian_word}?', reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = russian_word
        data['other_words'] = other_words


@bot.message_handler(func=lambda message: True, content_types=['text']) # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–π –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
def message_reply(message):
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data: # bot.retrieve_data() ‚Äî —ç—Ç–æ –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ä–∞–Ω–µ–µ
        # message.from_user.id –∏ message.chat.id ‚Äî —ç—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç–∞.
        if 'target_word' in data:
            target_word = data['target_word']
            print("–ü–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ:", target_word)
            if message.text == target_word:
                bot.send_message(message.chat.id, '–ú–æ–ª–æ–¥–µ—Ü! –ù–∞–∂–º–∏ "–¥–∞–ª—å—à–µ" –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞')
            else:
                bot.send_message(message.chat.id, '–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–∂–º–∏ "–¥–∞–ª—å—à–µ", —á—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ')
        else:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞: –Ω–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞ –¥–ª—è —É–≥–∞–¥—ã–≤–∞–Ω–∏—è.')



if __name__ == '__main__':
    create_db()
    add_initial_global_words()
    print('Bot is running!')
    bot.polling()
